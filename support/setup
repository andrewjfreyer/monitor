#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# SETUP NECESSARY FILES 
#
# ----------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------
# CHECK DEPENDENCES
# ----------------------------------------------------------------------------------------

#FIND DEPENDENCY PATHS, ELSE MANUALLY SET
service_path="/etc/systemd/system/monitor.service"
mosquitto_pub_path=$(which mosquitto_pub)
mosquitto_sub_path=$(which mosquitto_sub)
l2ping_path=$(which l2ping)
hcidump_path=$(which hcidump)
bc_path=$(which bc)
git_path=$(which git)

#ERROR CHECKING FOR MOSQUITTO PUBLICATION 
should_exit=false
[ -z "$l2ping_path" ] && echo "Warning: Recommended package 'l2ping' not found. Please consider installing 'l2ping'."
[ -z "$mosquitto_pub_path" ] && echo "Error: Required package 'mosquitto_pub' not found. Please install 'mosquitto' and 'mosquitto-clients'." && should_exit=true
[ -z "$mosquitto_sub_path" ] && echo "Error: Required package 'mosquitto_sub' not found. Please install 'mosquitto' and 'mosquitto-clients'." && should_exit=true
[ -z "$hcidump_path" ] && echo "Error: Required package 'hcidump' not found. Please install 'bluez-hcidump' (e.g., sudo apt-get install bluez-hcidump)." && should_exit=true
[ -z "$bc_path" ] && echo "Error: Required package 'bc' not found. Please install 'bc' (e.g., apt-get install bc)" && should_exit=true
[ -z "$git_path" ] && echo "Warning: Recommended package 'git' not found. Please consider installing for regular updates."
[ ! -z "$(which systemctl)" ] && [ ! -e "$service_path" ] && echo "Warning: monitor.service not installed. Install service? (y/n)" && read should_install

#BASE DIRECTORY REGARDLESS OF INSTALLATION; ELSE MANUALLY SET HERE
base_directory=$(dirname "$(readlink -f "$0")")

#SET THE NAME CACHE IF IT DOESN'T EXIST
[ ! -f "$base_directory/.public_name_cache" ] && echo "" > "$base_directory/.public_name_cache"
[ ! -f "address_blacklist" ] && echo "#LIST MAC ADDRESSES TO IGNORE, ONE PER LINE:
" > "address_blacklist"

#BLACKLISTED ADDRESSES
ADDRESS_BLACKLIST="address_blacklist"

#----------------------------------------------------------------------------------------
# CHECK MQTT CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#MQTT PREFERENCES
MQTT_CONFIG="$base_directory/mqtt_preferences"

if [ -f $MQTT_CONFIG ] ; then 
	source $MQTT_CONFIG

	#ERRORS
	[ "$mqtt_address" == "0.0.0.0" ] && echo "Error: Please customize mqtt broker address in: mqtt_preferences" && should_exit=true
	[ "$mqtt_user" == "username" ] && echo "Warning: For security purposes, please consider changing 'username' in: mqtt_preferences"
	[ "$mqtt_password" == "password" ]&& echo "Warning: For security purposes, please consider changing 'password' in: mqtt_preferences"
	[ ! -f "$mqtt_certificate_path" ] && [ ! -z "$mqtt_certificate_path" ] && echo "Error: Please check mqtt certificate path in mqtt_preferences" && should_exit=true

	#WARNINGS
	[ -z "$mqtt_port" ] && echo "Warning: Variable mqtt_port does not appear in: mqtt_preferences. Using default port 1883". && mqtt_port="1883"
	[ -z "$mqtt_publisher_identity" ] && echo "Warning: Variable mqtt_publisher_identity does not appear in: mqtt_preferences. Using hostname: $(hostname)". && mqtt_publisher_identity="$(hostname)"

	#DEFINE CA APPEND
	if [ -f "$mqtt_certificate_path" ]; then 
		#DEFINE APPEND TO USE FOR MQTT
		mqtt_ca_file_append="--cafile $mqtt_certificate_path"
	fi 
else
	echo "> mosquitto preferences file created. Please customize." 

echo "# ---------------------------
#								
# MOSQUITTO PREFERENCES
#								
# ---------------------------

# IP ADDRESS OF MQTT BROKER
mqtt_address=0.0.0.0

# MQTT BROKER USERNAME (OR BLANK FOR NONE)
mqtt_user=username

# MQTT BROKER PASSWORD (OR BLANK FOR NONE)
mqtt_password=password

# MQTT PUBLISH TOPIC ROOT 
mqtt_topicpath=monitor

# PUBLISHER IDENTITY 
mqtt_publisher_identity=''

# MQTT PORT 
mqtt_port='1883'

# MQTT CERTIFICATE FILE (LEAVE BLANK IF NONE)
mqtt_certificate_path=''" > "$MQTT_CONFIG"

	#SET SHOULD EXIT
	should_exit=true
fi 

#----------------------------------------------------------------------------------------
# CHECK STATIC DEVICE CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#STATIC DEVICES PREFERENCES
PUB_CONFIG="$base_directory/known_static_addresses"

if [ -f "$PUB_CONFIG" ]; then 
	#DOUBLECHECKS 
	[ ! -z "$(cat "$PUB_CONFIG" | grep "^00:00:00:00:00:00")" ] && echo " - Error: Please customize public mac addresses in: known_static_addresses" && should_exit=true
else
	echo "> public MAC address list file created. Please customize."
	#IF NO PUBLIC ADDRESS FILE; LOAD 
	echo "
# ---------------------------
#
# PUBLIC MAC ADDRESS LIST
#
# ---------------------------

00:00:00:00:00:00 Nickname #comment" > "$PUB_CONFIG"

	#SET SHOULD EXIT
	should_exit=true
fi 


#----------------------------------------------------------------------------------------
# CHECK BEACON DEVICE CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#STATIC DEVICES PREFERENCES
BEAC_CONFIG="$base_directory/known_beacon_addresses"

if [ -f "$BEAC_CONFIG" ]; then 
	#DOUBLECHECKS 
	[ ! -z "$(cat "$BEAC_CONFIG" | grep "^00:00:00:00:00:00")" ] && echo " - Error: Please customize beacon mac addresses in: known_beacon_addresses" && should_exit=true
else
	echo "> beacon MAC address list file created. Please customize."
	#IF NO PUBLIC ADDRESS FILE; LOAD 
	echo "# ---------------------------
#
# BEACON MAC ADDRESS LIST
#
# 	Format: 00:00:00:00:00:00 Nickname #optional comments
# ---------------------------" > "$BEAC_CONFIG"
fi 

#----------------------------------------------------------------------------------------
# CHECK MONITOR.SERVICE (IF APPLICABLE)
#
#	CREDITS & CONTRIBUTIONS: x99percent 
# ----------------------------------------------------------------------------------------

#FILTER THE ARGV FROM THE PARENT SCRIPT TO REMOVE ONE-TIME USE VARIABLES
FILTERED_ARGS=$(echo "$RUNTIME_ARGS" | sed 's/ \?-d//g;s/ \?-u//g;s/  */ /g')

#CHECK FOR CORRECT SERVICE; 
if [ "$should_install" == "y" ] || [ "$PREF_UPDATE_SERVICE" == true ] ; then
	#REMOVE ALL INSTANCES
	rm "$service_path" 2>&1 >/dev/null

	#CHECK FOR SYSTEMCTL FILE
	base_directory=$(dirname "$(readlink -f "$0")")

echo "[Unit]
Description=Monitor Service
After=network.target

[Service]
User=root
ExecStart=/bin/bash $base_directory/$(basename $0) $FILTERED_ARGS &
WorkingDirectory=$base_directory
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target network.target" > "$service_path"

	#PRINT RESULTS
	[ "$PREF_UPDATE_SERVICE" == true ]  && echo "> monitor.service updated with arguments: $FILTERED_ARGS" 

	sleep 3

	#RELOAD DAEMON AND ENABLE SERVICE
	systemctl daemon-reload
	systemctl enable monitor.service
fi 

#----------------------------------------------------------------------------------------
# BEFORE WE ECHO PREFERENCES, EXIT IF WE NEED TO 
# ----------------------------------------------------------------------------------------

#ARE REQUIREMENTS MET? 
[ "$should_exit" == true ] && exit 1

#----------------------------------------------------------------------------------------
# CHECK BEHAVIOR CONFIGURATION FILES
#----------------------------------------------------------------------------------------

#MQTT PREFERENCES
PREF_CONFIG="$base_directory/behavior_preferences"
[ "$PREF_RESTORE_DEFAULTS" == true ] && rm "$PREF_CONFIG"


if [ -f "$PREF_CONFIG" ]; then 
	source "$PREF_CONFIG"

	preferences=$(echo "> preference: delay between scans = $PREF_INTERSCAN_DELAY
> preference: periodic arrive/depart check interval = $PREF_CLOCK_INTERVAL
> preference: periodic arrive interval = $PREF_ARRIVE_SCAN_INTERVAL
> preference: periodic depart interval = $PREF_DEPART_SCAN_INTERVAL 
> preference: database refresh interval = $PREF_DATABASE_REFRESH_INTERVAL
> preference: max arrival scan attempts = $PREF_ARRIVAL_SCAN_ATTEMPTS
> preference: max depart scan attempts = $PREF_DEPART_SCAN_ATTEMPTS
> preference: random advertisement expiration = $PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL
> preference: beacon rssi change required for reporting = $PREF_RSSI_CHANGE_THRESHOLD 
> preference: bluetooth environmental report frequency = $PREF_ENVIRONMENTAL_REPORT_INTERVAL
> preference: forced departure check interval = $PREF_PERIODIC_FORCED_DEPARTURE_SCAN_INTERVAL
> preference: interval until beacon is considered expired = $PREF_BEACON_EXPIRATION
> preference: trigger a departure scan at other nodes below [x] confidence = $PREF_COOPERATIVE_SCAN_THRESHOLD
> preference: preferred HCI device = $PREF_HCI_DEVICE
> preference: minimum time between the same type of scan = $PREF_MINIMUM_TIME_BETWEEN_SCANS
> preference: mqtt scan start/end reporting = $PREF_MQTT_REPORT_SCAN_MESSAGES
> mqtt trigger: $mqtt_topicpath/scan/ARRIVE
> mqtt trigger: $mqtt_topicpath/scan/DEPART" | sed 's/= $/= ERROR\!/g')
	echo "$preferences"

	#DEFAULTS
	[ -z "$PREF_INTERSCAN_DELAY" ] && PREF_INTERSCAN_DELAY=3
	[ -z "$PREF_CLOCK_INTERVAL" ] && PREF_CLOCK_INTERVAL=15
	[ -z "$PREF_DEPART_SCAN_INTERVAL" ] && PREF_DEPART_SCAN_INTERVAL=90
	[ -z "$PREF_ARRIVE_SCAN_INTERVAL" ] && PREF_ARRIVE_SCAN_INTERVAL=45
	[ -z "$PREF_ARRIVAL_SCAN_ATTEMPTS" ] && PREF_ARRIVAL_SCAN_ATTEMPTS=2
	[ -z "$PREF_DEPART_SCAN_ATTEMPTS" ] && PREF_DEPART_SCAN_ATTEMPTS=4
	[ -z "$PREF_DATABASE_REFRESH_INTERVAL" ] && PREF_DATABASE_REFRESH_INTERVAL=35
	[ -z "$PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL" ] && PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL=45
	[ -z "$PREF_RSSI_CHANGE_THRESHOLD" ] && PREF_RSSI_CHANGE_THRESHOLD=20
	[ -z "$PREF_ENVIRONMENTAL_REPORT_INTERVAL" ] && PREF_ENVIRONMENTAL_REPORT_INTERVAL=300
	[ -z "$PREF_BEACON_EXPIRATION" ] && PREF_BEACON_EXPIRATION=145
	[ -z "$PREF_PERIODIC_FORCED_DEPARTURE_SCAN_INTERVAL" ] && PREF_PERIODIC_FORCED_DEPARTURE_SCAN_INTERVAL=120
	[ -z "$PREF_HCI_DEVICE" ] && PREF_HCI_DEVICE='hci0'
	[ -z "$PREF_COOPERATIVE_SCAN_THRESHOLD" ] && PREF_COOPERATIVE_SCAN_THRESHOLD=25
	[ -z "$PREF_MINIMUM_TIME_BETWEEN_SCANS" ] && PREF_MINIMUM_TIME_BETWEEN_SCANS=15
	[ -z "$PREF_MQTT_REPORT_SCAN_MESSAGES" ]  && PREF_MQTT_REPORT_SCAN_MESSAGES=false

	#IF PREFERENCES ARE NOT PROPERLY SET, EXIT
	[ "$(echo "$preferences" | grep -c "ERROR")" -gt "0" ] && echo "> warning: preferences error, using defaults. consider reset to defaults with '-d' flag"

else
	echo "> default behavior preferences file created. Please customize to your needs." 

	echo "# ---------------------------
#								
# BEHAVIOR PREFERENCES
#								
# ---------------------------

#DELAY BETWEEN SCANS OF DEVICES
PREF_INTERSCAN_DELAY=3

#DETERMINE HOW OFTEN TO CHECK FOR A DEPARTED DEVICE OR AN ARRIVED DEVICE
PREF_CLOCK_INTERVAL=15

#DEPART SCAN INTERVAL
PREF_DEPART_SCAN_INTERVAL=90

#ARRIVE SCAN INTERVAL
PREF_ARRIVE_SCAN_INTERVAL=45

#MAX RETRY ATTEMPTS FOR ARRIVAL
PREF_ARRIVAL_SCAN_ATTEMPTS=2

#MAX RETRY ATTEMPTS FOR DEPART
PREF_DEPART_SCAN_ATTEMPTS=4

#DETERMINE NOW OFTEN TO REFRESH DATABASES TO REMOVE EXPIRED DEVICES
PREF_DATABASE_REFRESH_INTERVAL=35

#PERIOD AFTER WHICH A RANDOM BTLE ADVERTISEMENT IS CONSIDERED EXPIRED
PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL=45

#AMOUNT AN RSSI MUST CHANGE (ABSOLUTE VALUE) TO REPORT BEACON AGAIN
PREF_RSSI_CHANGE_THRESHOLD=10

#BLUETOOTH ENVIRONMENTAL REPORT FREQUENCY
PREF_ENVIRONMENTAL_REPORT_INTERVAL=300

#SECONDS UNTIL A BEACON IS CONSIDERED EXPIRED
PREF_BEACON_EXPIRATION=145

#SECONDS AFTER WHICH A DEPARTURE SCAN IS TRIGGERED
PREF_PERIODIC_FORCED_DEPARTURE_SCAN_INTERVAL=240

#PREFERRED HCI DEVICE
PREF_HCI_DEVICE='hci0'

#COOPERATIVE DEPARTURE SCAN TRIGGER THRESHOLD
PREF_COOPERATIVE_SCAN_THRESHOLD=25

#MINIMUM TIME BEWTEEN THE SAME TYPE OF SCAN (ARRIVE SCAN, DEPART SCAN)
PREF_MINIMUM_TIME_BETWEEN_SCANS=15

#SHOULD REPORT START/END OF KNOWN DEVICE SCANS
PREF_MQTT_REPORT_SCAN_MESSAGES=false

#The following settings can be set from the command line

# repeated scan mode enabled (-r)
#PREF_PERIODIC_MODE=true

# ibeacon reporting mode enabled (-b)
#PREF_BEACON_MODE=true

# trigger mode: arrive scan only on MQTT trigger (-ta|-tra|-tar)
#PREF_TRIGGER_MODE_ARRIVE=true

# trigger mode: depart scan only on MQTT trigger (-td|-trd|-tdr)
#PREF_TRIGGER_MODE_DEPART=true

# trigger mode: report out MQTT arrive\/depart scan triggers to other devices (-tr)
#PREF_TRIGGER_MODE_REPORT_OUT=true

# generic bluetooth beacon reporting mode enabled (-g)
#PREF_PUBLIC_MODE=true

# report all scan results mode enabled (-a)
#PREF_REPORT_ALL_MODE=true

# private information redacted from logs (-R)
#PREF_REDACT=true

# retaining mqtt status reports (-x)
#PREF_SHOULD_RETAIN=true

# only allow letters, numbers, and spaces in mqtt topic paths (-f)
#PREF_FORMAT_MQTT=true

# report bluetooth environment periodically via mqtt at topic: [topic path]\/environment (-e)
#PREF_PUBLISH_ENVIRONMENT_MODE=true

# send heartbeat signal (-m)
#PREF_HEARTBEAT=true

# publishing MQTT scan, arrival, depart, start, end (-E)
#PREF_MQTT_REPORT_SCAN_MESSAGES=true

#publishing all MQTT presence messages to single topic (-s)
#PREF_MQTT_SINGLE_TOPIC_MODE=true

" > "$PREF_CONFIG"

	#LOAD DEFAULT PREFERENCES
	should_exit=true
fi 


#ARE REQUIREMENTS MET? 
[ "$should_exit" == true ] && exit 1

