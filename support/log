#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# PRINTING AND DEBUGGING
#
# ----------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------
# PRETTY PRINT FOR DEBUG
# ----------------------------------------------------------------------------------------

#COLOR OUTPUT FOR RICH OUTPUT 
ORANGE=$'\e[1;33m'
RED=$'\e[1;31m'
NC=$'\e[0m'
GREEN=$'\e[1;32m'
PURPLE=$'\e[1;35m'
BLUE=$'\e[1;34m'
CYAN=$'\e[1;36m'
REPEAT=$'\e[1A'

#VARIABLES FOR LOGGING LOGSPAM PREVENTION
last_log_line=""
duplicate_log_count=1

#FORK THE LOG FROM THE MAIN THREAD 
log_listener () {
	#LOG PIPE
	while true; do 
		#READ FROM THE MAIN PIPE
		local line 
		while read line; do 

			#REPLACE NEWLINE TAGS
			line=$(echo "$line" | sed 's/<br>/\n/g;s/<p>/\t/g')

			#ECHO TO CONSOLE, REMOVING EXTRA SPACES	
			should_repeat=""
			line_append=""

			#IS THIS LINE DUPLICATED?
			if [ "$last_log_line" == "$line" ] ; then 
				duplicate_log_count=$((duplicate_log_count + 1 ))
				line_append=" (x$duplicate_log_count)"
				should_repeat=$REPEAT

			else 
				duplicate_log_count=1
			fi  

			if [ "$PREF_REDACT" == true ]; then 
				line=$(echo "$line" | sed "s/\([0-9A-F]\{2\}:\)\{5\}/ [REDACTED]:/g;s/\([0-9A-F-]\{36\}\)/ [REDACTED]/g" )
				line="$line"
			fi 

			#ECHO LAST LINE
			printf "${should_repeat}$version $(date "+%I:%M:%S %p") $line$line_append\n"
			last_log_line="$line"

		done < log_pipe
	done 
}


#PRINT TO LOG UNLESS DUPLICATE LINE
log() {
	#SEND TO LOG PIPE
	echo "$1" | sed 's/  */ /g' > log_pipe
}