#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# HELP FILE AND GENERAL PREFERENCES
#
# ----------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------
# REPORT CURRENT VERSION 
# ----------------------------------------------------------------------------------------

previous_version=$(cat ".previous_version")

#DETERMINE IF UPDATED SINCE LAST RUN
if [ "$previous_version" != "$version" ]; then 

	#HAVE WE REPORTED AN UPDATE BEFORE?
	[ -z "$previous_version" ] && previous_version="Unknown"
	
	#UPDATE REPORT
	echo "Updated $(basename "$0") (v. $previous_version) -> (v. $version)..."

	#RECORD UPDATED VERSION
	echo "$version" > ".previous_version"
else 
	#STANDARD RUN
	echo "Starting $(basename "$0") (v. $version)..."
fi 

# ----------------------------------------------------------------------------------------
# HELP TEXT
# ----------------------------------------------------------------------------------------

show_help_text() {
	#SHOW HELPFULE
	echo "

monitor.sh

Andrew J Freyer, 2018
GNU General Public License

----- Summary -----

This is a shell script and a set of helper scripts that passively 
monitor for specified bluetooth devices, iBeacons, and bluetooth 
devices that publicly advertise. Once a specified device, iBeacon, or 
publicly device is found, a report is made via MQTT to a specified 
MQTT broker. When a previously-found device expires or is not found, 
a report is made via MQTT to the broker that the device has departed. 

----- Background ----- 

By default, most BTLE devices repeatedly advertise their presence with a 
random mac address at a random interval. The randomness is to maintain 
privacy and to prevent device tracking by bad actors or advertisers. 

----- Description ----- 

By knowing the static bluetooth mac address of a specified 
bluetooth device before hand, a random advertisement can be used 
as a trigger to scan for the presence of that known device. This 
construction enables the script to rapidly detect the arrival of 
a specified bluetooth device, while reducing the number of times 
an affirmative scan operation is required (which may interfere 
with 2.4GHz Wi-Fi).

To see current command line settings view service exec command by 
'sudo systemctl status monitor.service'

To use from the command line (once installed) please stop the service
'sudo systemctl stop monitor.service'

usage:
   Monitor not started - info only:

	monitor -h 	show usage information
	monitor -v	print version number
	monitor -l	List preferences set in behavior_preferences file

   Monitor started - all saved command line options are ignored:

	monitor -R 	redact private information from logs
	monitor -m 	send heartbeat signal
	monitor -C 	clean retained messages from MQTT broker
	monitor -e 	report bluetooth environment periodically via mqtt at topic:
				[topic path]/environment 
	monitor -E 	report scan status messages:
				[topic path]/scan/[arrive|depart]/[start|end]

	monitor -c 	clean manufacturer cache and generic beacon cache
	monitor -d	restore to default settings
	monitor -u	update 'monitor.service' to current command line settings
			(excluding -u and -d flags) - existing options overwritten

	monitor -s  report all mqtt messages to a single topic with 
				\$mqtt_topicpath/\$mqtt_publisher_identity  (defined in MQTT preferences file)

	monitor -r	repeatedly scan for arrival & departure of known devices
	monitor -f	format MQTT topics with only letters and numbers
	monitor -b	report iBeacon advertisements and data
	monitor -a	report all known device scan results, not just changes
	monitor -x	retain mqtt status messages
	monitor -g	report generic bluetooth advertisements
	monitor -t[adr]	scan for known devices only on mqtt trigger messages:
				a \$mqtt_topicpath/scan/ARRIVE (defined in MQTT preferences file)
				d \$mqtt_topicpath/scan/DEPART (defined in MQTT preferences file)
				r send ARRIVE or DEPART messages to trigger other devices to scan 
	"
}

show_settings() {
	base_directory=$(dirname "$(readlink -f "$0")")
	TEMP_PREF_CONFIG="$base_directory/behavior_preferences"
	source "$TEMP_PREF_CONFIG"

	preferences=$(echo "> preference: delay between scans = $PREF_INTERSCAN_DELAY
> preference: periodic arrive/depart check interval = $PREF_CLOCK_INTERVAL
> preference: periodic arrive interval = $PREF_ARRIVE_SCAN_INTERVAL
> preference: periodic depart interval = $PREF_DEPART_SCAN_INTERVAL 
> preference: database refresh interval = $PREF_DATABASE_REFRESH_INTERVAL
> preference: max arrival scan attempts = $PREF_ARRIVAL_SCAN_ATTEMPTS
> preference: max depart scan attempts = $PREF_DEPART_SCAN_ATTEMPTS
> preference: random advertisement expiration = $PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL
> preference: beacon rssi change required for reporting = $PREF_RSSI_CHANGE_THRESHOLD 
> preference: bluetooth environmental report frequency = $PREF_ENVIRONMENTAL_REPORT_INTERVAL
> preference: forced departure check interval = $PREF_PERIODIC_FORCED_DEPARTURE_SCAN_INTERVAL
> preference: interval until beacon is considered expired = $PREF_BEACON_EXPIRATION
> preference: trigger a departure scan at other nodes below [x] confidence = $PREF_COOPERATIVE_SCAN_THRESHOLD
> preference: preferred HCI device = $PREF_HCI_DEVICE
> preference: minimum time between the same type of scan = $PREF_MINIMUM_TIME_BETWEEN_SCANS
> preference: mqtt scan start/end reporting = $PREF_MQTT_REPORT_SCAN_MESSAGES
> mqtt trigger: $mqtt_topicpath/scan/ARRIVE
> mqtt trigger: $mqtt_topicpath/scan/DEPART
>
> command line preferences currently set in behavior_preferences
> use sudo systemctl status monitor.service to see preferences set by command line
>
> (-r) repeated scan mode enabled - PREF_PERIODIC_MODE = $PREF_PERIODIC_MODE
> (-b) ibeacon reporting mode enabled - PREF_BEACON_MODE = $PREF_BEACON_MODE
> (-ta|-tra|-tar) trigger mode: arrive scan only on MQTT trigger - PREF_TRIGGER_MODE_ARRIVE = $PREF_TRIGGER_MODE_ARRIVE
> (-td|-trd|-tdr) trigger mode: depart scan only on MQTT trigger - PREF_TRIGGER_MODE_DEPART = $PREF_TRIGGER_MODE_DEPART
> (-tr) trigger mode: report out MQTT arrive/depart scan triggers to other devices - PREF_TRIGGER_MODE_REPORT_OUT = $PREF_TRIGGER_MODE_REPORT_OUT
> (-g) generic bluetooth beacon reporting mode enabled - PREF_PUBLIC_MODE = $PREF_PUBLIC_MODE
> (-a) report all scan results mode enabled - PREF_REPORT_ALL_MODE = $PREF_REPORT_ALL_MODE
> (-R) private information redacted from logs - PREF_REDACT = $PREF_REDACT
> (-x) retaining mqtt status reports - PREF_SHOULD_RETAIN = $PREF_SHOULD_RETAIN
> (-f) only allow letters, numbers, and spaces in mqtt topic paths - PREF_FORMAT_MQTT = $PREF_FORMAT_MQTT
> (-e) publishing bluetooth environment every $PREF_ENVIRONMENTAL_REPORT_INTERVAL seconds - PREF_PUBLISH_ENVIRONMENT_MODE = $PREF_PUBLISH_ENVIRONMENT_MODE
> (-m) send heartbeat signal - PREF_HEARTBEAT = $PREF_HEARTBEAT
> (-E) publishing MQTT .../scan/[arrival|depart]/[start|end] - PREF_MQTT_REPORT_SCAN_MESSAGES = $PREF_MQTT_REPORT_SCAN_MESSAGES
> (-s) publishing all MQTT presence messages to - PREF_MQTT_SINGLE_TOPIC_MODE = $PREF_MQTT_SINGLE_TOPIC_MODE
" | sed 's/= $/= \*\*Not Set In behavior_preferences File\*\*/g')

	echo "$preferences"
}

# ----------------------------------------------------------------------------------------
# PROCESS OPTIONS (technique: https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
# ----------------------------------------------------------------------------------------

OPTIND=1

while getopts "h?lvrfbut:EgRcCmesadx" opt; do
	case "$opt" in
		r|f|b|u|t|E|g|R|c|C|m|e|s|a|d|x)
			#PREFERENCES
			PREF_PERIODIC_MODE=false
			PREF_BEACON_MODE=false
			PREF_TRIGGER_MODE_ARRIVE=false
			PREF_TRIGGER_MODE_DEPART=false
			PREF_TRIGGER_MODE_REPORT_OUT=false
			PREF_PUBLIC_MODE=false
			PREF_REPORT_ALL_MODE=false
			PREF_RESTORE_DEFAULTS=false
			PREF_UPDATE_SERVICE=false
			PREF_REDACT=false
			PREF_SHOULD_RETAIN=false
			PREF_CLEAN_MQTT=false
			PREF_FORMAT_MQTT=false
			PREF_PUBLISH_ENVIRONMENT_MODE=false
			PREF_HEARTBEAT=false
			PREF_MQTT_REPORT_SCAN_MESSAGES=false
			PREF_MQTT_SINGLE_TOPIC_MODE=false
			break
			;;

		h|\?|v|l)
			break
			;;
	esac
done

OPTIND=1

while getopts "h?lvrfbut:EgRcCmesadx" opt; do
	case "$opt" in
		h|\?)
			show_help_text
			exit 0
			;;
		v)  
			echo "$VERSION"
			exit 0
			;;
                l)	
			show_settings
			exit 0
                        ;;
		c)  
			rm ".manufacturer_cache" && rm ".public_name_cache" && echo "> cleaning caches"
			;;
		C)  
			PREF_CLEAN_MQTT=true && echo "> cleaning retained messages on broker"
			;;
		E)  PREF_MQTT_REPORT_SCAN_MESSAGES=true  && echo "> publishing MQTT .../scan/[arrival|depart]/[start|end]"
			;;
		s)  PREF_MQTT_SINGLE_TOPIC_MODE=true  && echo "> publishing all MQTT presence messages to \$mqtt_topicpath/\$mqtt_publisher_identity"
			;;
		e)  PREF_PUBLISH_ENVIRONMENT_MODE=true  && echo "> publishing bluetooth environment every $PREF_ENVIRONMENTAL_REPORT_INTERVAL seconds"
			;;
		x)  PREF_SHOULD_RETAIN=true  && echo "> retaining mqtt status reports"
			;;
		R)  PREF_REDACT=true  && echo "> private information redacted from logs"
			;;
		d)  PREF_RESTORE_DEFAULTS=true 	&& echo "> restoring default settings"
			;;
		r)  PREF_PERIODIC_MODE=true 	&& echo "> repeated scan mode enabled"
			;;
		u)  PREF_UPDATE_SERVICE=true 	&& echo "> updating monitor.service"
			;;
		b)  PREF_BEACON_MODE=true 		&& echo "> ibeacon reporting mode enabled"
			;;
		f)  PREF_FORMAT_MQTT=true 		&& echo "> only allow letters, numbers, and spaces in mqtt topic paths"
			;;
		g)  PREF_PUBLIC_MODE=true 		&& echo "> generic bluetooth beacon reporting mode enabled"
			;;
		t)  #DO WE INCLUDE THE REPORTING TRIGGER?
			[[ $OPTARG = *r* ]] && PREF_TRIGGER_MODE_REPORT_OUT=true && echo "> trigger mode: report out MQTT arrive/depart scan triggers to other devices" 
			#SORT THROUGH REMAINING FILTERS
			case "$OPTARG" in 
				r)	PREF_TRIGGER_MODE_REPORT_OUT=true
					;;
				d|rd|dr)	PREF_TRIGGER_MODE_DEPART=true && echo "> trigger mode: depart scan only on MQTT trigger" 
					;;
				a|ra|ar)	PREF_TRIGGER_MODE_ARRIVE=true && echo "> trigger mode: arrive scan only on MQTT trigger" 
					;;
				da|ad|rda|rad|dra|ard|dar|adr) PREF_TRIGGER_MODE_ARRIVE=true && PREF_TRIGGER_MODE_DEPART==true && echo "> trigger mode: scan only (both on arrive and depart) on trigger" 
					;;
				*) echo "> warning: unknown trigger mode: $OPTARG"
				;;
			esac
			;;
		a)  PREF_REPORT_ALL_MODE=true 	&& echo "> report all scan results mode enabled"
			;;
		m)  PREF_HEARTBEAT=true 	&& echo "> send heartbeat signal"
			;;
		*)	
			echo "> unknown argument: $opt"
			exit 1
	esac
done

#RESET OPTION INDEX
shift $((OPTIND-1))

#SHIFT IF NECESSARY
[ "$1" = "--" ] && shift

