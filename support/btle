#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# BLUETOOTH SCANNING AND PACKET PROCESSING
#
# ----------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------
# BLUETOOTH LE BACKGROUND SCANNING
# ----------------------------------------------------------------------------------------
btle_scanner () {
	while true; do 
		#TIMEOUT THE HCITOOL SCAN TO RESHOW THE DUPLICATES WITHOUT SPAMMING THE MAIN LOOP BY USING THE --DUPLICATES TAG
		local hcitool_raw=$(timeout --signal SIGINT 30 hcitool -i $PREF_HCI_DEVICE lescan 2>&1)

		#FIND ERROR VALUES 
		local error=$(echo "$hcitool_raw" | grep -iE 'input/output error|invalid device|invalid|error')

		#ALL OTHER BEACON DEVICES FILTERED
		beacons_filtered=$(echo "$hcitool_raw" | grep -Ei "([0-9a-f]{2}:){5}[0-9a-f]{2}" | sort -u)

		#PUBLISH ERRORS BACK TO MAIN LOOP
		[ ! -z "$error" ] && echo "ERRO$error" > main_pipe 
		sleep 2
	done
}

# ----------------------------------------------------------------------------------------
# PROCESS BLUETOOTH PACKETS
# ----------------------------------------------------------------------------------------

btle_packet_processor () {
	#POPULATE PACKET 
	local packet=$(echo "$1" | sed 's/> *//g')

	#BEACON PACKET?
	if [[ $packet =~ ^04\ 3E\ 2A\ 02\ 01\ .{26}\ 02\ 01 ]]; then

		#HARDARE MAC AND PDU HEADER
		local received_mac_address=$(echo "$packet" | awk '{print $13":"$12":"$11":"$10":"$9":"$8}')
		local pdu_header=$(pdu_type $(echo "$packet" | awk '{print $6}'))

		#RAW VALUES
		local UUID=$(echo $packet | sed 's/^.\{69\}\(.\{47\}\).*$/\1/')
		local MAJOR=$(echo $packet | sed 's/^.\{117\}\(.\{5\}\).*$/\1/')
		local MINOR=$(echo $packet | sed 's/^.\{123\}\(.\{5\}\).*$/\1/')
		local POWER=$(echo $packet | sed 's/^.\{129\}\(.\{2\}\).*$/\1/')
		local UUID=$(echo $UUID | sed -e 's/\ //g' -e 's/^\(.\{8\}\)\(.\{4\}\)\(.\{4\}\)\(.\{4\}\)\(.\{12\}\)$/\1-\2-\3-\4-\5/')
	
		#MAJOR CALCULATION
		MAJOR=$(echo $MAJOR | sed 's/\ //g')
		MAJOR=$(echo "ibase=16; $MAJOR" | bc)

		#MINOR CALCULATION
		MINOR=$(echo $MINOR | sed 's/\ //g')
		MINOR=$(echo "ibase=16; $MINOR" | bc)

		#POWER CALCULATION
		POWER=$(echo "ibase=16; $POWER" | bc)
		POWER=$((POWER - 256))

		#RSSI CALCULATION
		local RSSI=$(echo $packet | sed 's/^.\{132\}\(.\{2\}\).*$/\1/')
		RSSI=$(echo "ibase=16; $RSSI" | bc)
		RSSI=$((RSSI - 256))

        #CLEAR PACKET
        packet=""

		#SEND TO MAIN LOOP
		[ ! -z "$UUID" ] && echo "BEAC$UUID|$MAJOR|$MINOR|$RSSI|$POWER|$received_mac_address|$pdu_header" > main_pipe 
	
	elif [[ "$packet" =~ ^04\ 3E* ]]; then
		
		#IF IN TRIGGER MODE, IGNORE
		[ "$PREF_TRIGGER_MODE_ARRIVE" == true ] && packet="" && return 0

		#GET RANDOM ADDRESS; REVERSE FROM BIG ENDIAN
		local received_mac_address=$(echo "$packet" | awk '{print $13":"$12":"$11":"$10":"$9":"$8}')
		
		#VERIFY ADDRESS DOES NOT START WITH 00
		[[ "$received_mac_address" =~ ^00 ]] && return  0

		#TWO BYTES ARE PDU HEADER
		local pdu_header=$(echo $packet | awk '{print $7$6}' )
		local pdu_header_bin=$(echo "ibase=16;obase=2;$pdu_header" | bc | xargs printf "%016d")

		#TxADD
		local tx_add=${pdu_header_bin:7:1}
		[[ $tx_add == 0 ]] && tx_add="PUBL" || tx_add="RAND"

		local rx_add=${pdu_header_bin:8:1}
		[[ $rx_add == 0 ]] && rx_add="PUBL" || rx_add="RAND"

		#BREAKOUT OF PDU HEADER INFORMATION 
		local pdu_type=$(pdu_type $(echo "ibase=2;${pdu_header_bin:12:4}" | bc ))

		#ADVERTISED DATA
		local adv_data="$packet"

		#RSSI VALUE
		local rssi_value_raw="${packet: -3}"
		local rssi_value=$(echo "ibase=16;$rssi_value_raw" | bc )
		rssi_value=$((rssi_value - 256))

		local gap_name_str=""

		#IF THIS IS A SCAN RESPONSE, FIND WHETHER WE HAVE USABLE GAP NAME DATA 
		if [ "$pdu_type" == 'SCAN_RSP' ] || [ "$pdu_type" == "ADV_NONCONN_IND" ]; then 
			gap_name_str=$(gap_name "$packet")
        fi

		#FILTER BASED ON RESPONSE/DATA TYPE		
        if [ "$pdu_type" == "ADV_IND" ] || [ "$pdu_type" == "ADV_NONCONN_IND" ] || [ "$pdu_type" == "SCAN_RSP" ] ; then 
			#SEND TO MAIN LOOP
			echo "$tx_add$received_mac_address|$pdu_type|$gap_name_str|$rssi_value|$adv_data" > main_pipe
		fi 

	#NAME REQUEST RESPONSES
	elif [[ "$packet" =~ ^04\ 07* ]]; then

		return 0
		
	else 
		#SEND UNKNOWN PACKET
		echo "UKNO$packet" > main_pipe		
	fi
}

# ----------------------------------------------------------------------------------------
# BLUETOOTH LE RAW PACKET ANALYSIS
# ----------------------------------------------------------------------------------------
btle_listener () {	
	#DEFINE VARAIBLES
	local packet=""
	local complete_packet_str_length=0
	while read line; do
		# packets start with ">" or "<"
		if [[ $line =~ ^\> ]] || [[ $line =~ ^\< ]]; then
			# process the completed packet (unless this is the first time through)
			if [ "$packet" ] && [[ $packet =~ ^\> ]]; then
				btle_packet_processor "$packet"
			fi
			# start the new packet
			packet=$line
			complete_packet_str_length=0

			if [[ "$packet" =~ ^\>\ 04\ 3E* ]]; then
				local packet_len=$(echo $packet | awk '{print "ibase=16;"$4}' | bc )
				complete_packet_str_length=$((( packet_len + 3) * 3  + 1))
			fi 
		else
			# continue building the packet
			packet="$packet $line"

			#PROCESS A PACKET WHEN IT IS COMPLETE
			if [ "$complete_packet_str_length" == "${#packet}" ]; then 
				btle_packet_processor "$packet"
				packet=""
			fi 
		fi
	done < <(hcidump -i $PREF_HCI_DEVICE --raw)
}